
uart_to_frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004090  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000010  080041e0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080041e0  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b171  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c2c  00000000  00000000  0002b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  0002db08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ec9  00000000  00000000  0002e750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d5f  00000000  00000000  00045619  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086874  00000000  00000000  0004f378  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5bec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  000d5c68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004188 	.word	0x08004188

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004188 	.word	0x08004188

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f000 ff27 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f89d 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 f96d 	bl	8001134 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e5a:	f000 f941 	bl	80010e0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000e5e:	f000 f8dd 	bl	800101c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  UL212_Init(&ul212);
 8000e62:	4843      	ldr	r0, [pc, #268]	; (8000f70 <main+0x128>)
 8000e64:	f000 fc88 	bl	8001778 <UL212_Init>
  HAL_GPIO_WritePin(BUTTON_OUT_GPIO_Port, BUTTON_OUT_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6e:	4841      	ldr	r0, [pc, #260]	; (8000f74 <main+0x12c>)
 8000e70:	f001 fc6d 	bl	800274e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7a:	483f      	ldr	r0, [pc, #252]	; (8000f78 <main+0x130>)
 8000e7c:	f001 fc67 	bl	800274e <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1, ul212.rawData.uartBuffer, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	493b      	ldr	r1, [pc, #236]	; (8000f70 <main+0x128>)
 8000e84:	483d      	ldr	r0, [pc, #244]	; (8000f7c <main+0x134>)
 8000e86:	f002 fe46 	bl	8003b16 <HAL_UART_Receive_IT>
  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	483c      	ldr	r0, [pc, #240]	; (8000f80 <main+0x138>)
 8000e8e:	f002 f913 	bl	80030b8 <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (ul212.rawData.uartFlagEndString)
 8000e92:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <main+0x128>)
 8000e94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <main+0x5a>
		  UL212_DataParser(&ul212);
 8000e9c:	4834      	ldr	r0, [pc, #208]	; (8000f70 <main+0x128>)
 8000e9e:	f000 fa63 	bl	8001368 <UL212_DataParser>
	  if (ul212.hardwareCode == HW_NORMAL && ul212.softwareCode == SW_NORMAL_DATA &&
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <main+0x128>)
 8000ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d125      	bne.n	8000ef8 <main+0xb0>
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <main+0x128>)
 8000eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d120      	bne.n	8000ef8 <main+0xb0>
			  ul212.signalStrength > 60 && ul212.tiltAngle < 10 && ul212.validSignal > 26){
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <main+0x128>)
 8000eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	  if (ul212.hardwareCode == HW_NORMAL && ul212.softwareCode == SW_NORMAL_DATA &&
 8000ebc:	2b3c      	cmp	r3, #60	; 0x3c
 8000ebe:	d91b      	bls.n	8000ef8 <main+0xb0>
			  ul212.signalStrength > 60 && ul212.tiltAngle < 10 && ul212.validSignal > 26){
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <main+0x128>)
 8000ec2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8000ec6:	2b09      	cmp	r3, #9
 8000ec8:	d816      	bhi.n	8000ef8 <main+0xb0>
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <main+0x128>)
 8000ecc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ed0:	2b1a      	cmp	r3, #26
 8000ed2:	d911      	bls.n	8000ef8 <main+0xb0>
		  uint16_t dataL = ul212.liquidLevelValue;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <main+0x128>)
 8000ed6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000ed8:	80fb      	strh	r3, [r7, #6]
		  UL212_FrequencyOut((1000*dataL/ul212.valueUp) + 500);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee0:	fb02 f303 	mul.w	r3, r2, r3
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <main+0x128>)
 8000ee6:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8000eea:	fb93 f3f2 	sdiv	r3, r3, r2
 8000eee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fc24 	bl	8001740 <UL212_FrequencyOut>
		  //UL212_FrequencyOut(((float)dataL*ul212.coeficient) + 500);
	  }

	  UL212_LedHandler(&ul212);
 8000ef8:	481d      	ldr	r0, [pc, #116]	; (8000f70 <main+0x128>)
 8000efa:	f000 fbed 	bl	80016d8 <UL212_LedHandler>
	  if (counter){
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <main+0x13c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0c5      	beq.n	8000e92 <main+0x4a>
		  if(HAL_GPIO_ReadPin(BUTTON_IN_GPIO_Port, BUTTON_IN_Pin) != GPIO_PIN_SET){
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	481a      	ldr	r0, [pc, #104]	; (8000f74 <main+0x12c>)
 8000f0c:	f001 fc08 	bl	8002720 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d0bd      	beq.n	8000e92 <main+0x4a>
			  if(ul212.hardwareCode == HW_NORMAL && ul212.softwareCode == SW_NORMAL_DATA){
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <main+0x128>)
 8000f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1b8      	bne.n	8000e92 <main+0x4a>
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <main+0x128>)
 8000f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1b3      	bne.n	8000e92 <main+0x4a>
				  ul212.valueUp = ul212.liquidLevelValue;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <main+0x128>)
 8000f2c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <main+0x128>)
 8000f30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
				  ul212.coeficient = (float)1000/(float)ul212.valueUp;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <main+0x128>)
 8000f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fddc 	bl	8000af8 <__aeabi_ui2f>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4619      	mov	r1, r3
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <main+0x140>)
 8000f46:	f7ff fee3 	bl	8000d10 <__aeabi_fdiv>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <main+0x128>)
 8000f50:	65da      	str	r2, [r3, #92]	; 0x5c
				  FlashWriteSettings(ul212.valueUp, SETTINGS_PAGE);
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <main+0x128>)
 8000f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <main+0x144>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fd06 	bl	800196c <FlashWriteSettings>
				  counter = 0;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <main+0x13c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
				  UL212_LedInit(LED_FLASH_PROGRAM_OK);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fb9a 	bl	80016a0 <UL212_LedInit>
	  if (ul212.rawData.uartFlagEndString)
 8000f6c:	e791      	b.n	8000e92 <main+0x4a>
 8000f6e:	bf00      	nop
 8000f70:	200000cc 	.word	0x200000cc
 8000f74:	40010c00 	.word	0x40010c00
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	2000008c 	.word	0x2000008c
 8000f80:	20000034 	.word	0x20000034
 8000f84:	2000002c 	.word	0x2000002c
 8000f88:	447a0000 	.word	0x447a0000
 8000f8c:	08007c00 	.word	0x08007c00

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	; 0x40
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	2228      	movs	r2, #40	; 0x28
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 f8ea 	bl	8004178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fc01 	bl	80027e0 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fe4:	f000 fd05 	bl	80019f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fe6c 	bl	8002ce0 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800100e:	f000 fcf0 	bl	80019f2 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3740      	adds	r7, #64	; 0x40
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_TIM4_Init+0xbc>)
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <MX_TIM4_Init+0xc0>)
 8001042:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_TIM4_Init+0xbc>)
 8001046:	f242 720f 	movw	r2, #9999	; 0x270f
 800104a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_TIM4_Init+0xbc>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_TIM4_Init+0xbc>)
 8001054:	2230      	movs	r2, #48	; 0x30
 8001056:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_TIM4_Init+0xbc>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_TIM4_Init+0xbc>)
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001064:	481c      	ldr	r0, [pc, #112]	; (80010d8 <MX_TIM4_Init+0xbc>)
 8001066:	f001 ffd7 	bl	8003018 <HAL_TIM_OC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001070:	f000 fcbf 	bl	80019f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4619      	mov	r1, r3
 8001082:	4815      	ldr	r0, [pc, #84]	; (80010d8 <MX_TIM4_Init+0xbc>)
 8001084:	f002 fc8a 	bl	800399c <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800108e:	f000 fcb0 	bl	80019f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001092:	2330      	movs	r3, #48	; 0x30
 8001094:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 24;
 8001096:	2318      	movs	r3, #24
 8001098:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	4619      	mov	r1, r3
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <MX_TIM4_Init+0xbc>)
 80010aa:	f002 f9f5 	bl	8003498 <HAL_TIM_OC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80010b4:	f000 fc9d 	bl	80019f2 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_TIM4_Init+0xbc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_TIM4_Init+0xbc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0208 	orr.w	r2, r2, #8
 80010c6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <MX_TIM4_Init+0xbc>)
 80010ca:	f000 fcf1 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000034 	.word	0x20000034
 80010dc:	40000800 	.word	0x40000800

080010e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_USART1_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001118:	f002 fcb0 	bl	8003a7c <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f000 fc66 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000008c 	.word	0x2000008c
 8001130:	40013800 	.word	0x40013800

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	4b39      	ldr	r3, [pc, #228]	; (8001230 <MX_GPIO_Init+0xfc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a38      	ldr	r2, [pc, #224]	; (8001230 <MX_GPIO_Init+0xfc>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <MX_GPIO_Init+0xfc>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001160:	4b33      	ldr	r3, [pc, #204]	; (8001230 <MX_GPIO_Init+0xfc>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a32      	ldr	r2, [pc, #200]	; (8001230 <MX_GPIO_Init+0xfc>)
 8001166:	f043 0320 	orr.w	r3, r3, #32
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <MX_GPIO_Init+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_GPIO_Init+0xfc>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a2c      	ldr	r2, [pc, #176]	; (8001230 <MX_GPIO_Init+0xfc>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_GPIO_Init+0xfc>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_GPIO_Init+0xfc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <MX_GPIO_Init+0xfc>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_GPIO_Init+0xfc>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ae:	4821      	ldr	r0, [pc, #132]	; (8001234 <MX_GPIO_Init+0x100>)
 80011b0:	f001 facd 	bl	800274e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_OUT_GPIO_Port, BUTTON_OUT_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ba:	481f      	ldr	r0, [pc, #124]	; (8001238 <MX_GPIO_Init+0x104>)
 80011bc:	f001 fac7 	bl	800274e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <MX_GPIO_Init+0x100>)
 80011da:	f001 f947 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_OUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_OUT_Pin;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_OUT_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	4810      	ldr	r0, [pc, #64]	; (8001238 <MX_GPIO_Init+0x104>)
 80011f8:	f001 f938 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_IN_Pin */
  GPIO_InitStruct.Pin = BUTTON_IN_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_GPIO_Init+0x108>)
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_IN_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_GPIO_Init+0x104>)
 8001212:	f001 f92b 	bl	800246c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2028      	movs	r0, #40	; 0x28
 800121c:	f000 fe79 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001220:	2028      	movs	r0, #40	; 0x28
 8001222:	f000 fe92 	bl	8001f4a <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	40011000 	.word	0x40011000
 8001238:	40010c00 	.word	0x40010c00
 800123c:	10210000 	.word	0x10210000

08001240 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
	counter++;
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_GPIO_EXTI_Callback+0x20>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <HAL_GPIO_EXTI_Callback+0x20>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	2000002c 	.word	0x2000002c

08001264 <HAL_UART_RxCpltCallback>:

void ButtonHandling(tdStructUL212 * UL212){}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	switch (*ul212.rawData.uartBuffer)
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b23      	cmp	r3, #35	; 0x23
 8001272:	d022      	beq.n	80012ba <HAL_UART_RxCpltCallback+0x56>
 8001274:	2b2a      	cmp	r3, #42	; 0x2a
 8001276:	d141      	bne.n	80012fc <HAL_UART_RxCpltCallback+0x98>
	{
		case '*':
		{
			if (ul212.statusLed == LED_OK)HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 800127a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <HAL_UART_RxCpltCallback+0x2a>
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001288:	482b      	ldr	r0, [pc, #172]	; (8001338 <HAL_UART_RxCpltCallback+0xd4>)
 800128a:	f001 fa60 	bl	800274e <HAL_GPIO_WritePin>
			ul212.rawData.uartPoint = 0;
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ul212.rawData.uartBufferString[ul212.rawData.uartPoint] = *ul212.rawData.uartBuffer;
 8001296:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 8001298:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800129c:	4619      	mov	r1, r3
 800129e:	4b25      	ldr	r3, [pc, #148]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012a4:	440b      	add	r3, r1
 80012a6:	705a      	strb	r2, [r3, #1]
			ul212.rawData.uartPoint++;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012aa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012ae:	3301      	adds	r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		}
			break;
 80012b8:	e032      	b.n	8001320 <HAL_UART_RxCpltCallback+0xbc>

		case '#':
		{
			if(ul212.statusLed == LED_OK)HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d105      	bne.n	80012d0 <HAL_UART_RxCpltCallback+0x6c>
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	481b      	ldr	r0, [pc, #108]	; (8001338 <HAL_UART_RxCpltCallback+0xd4>)
 80012cc:	f001 fa3f 	bl	800274e <HAL_GPIO_WritePin>
			ul212.rawData.uartFlagEndString = TRUE;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			ul212.rawData.uartBufferString[ul212.rawData.uartPoint] = *ul212.rawData.uartBuffer;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012da:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012de:	4619      	mov	r1, r3
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012e6:	440b      	add	r3, r1
 80012e8:	705a      	strb	r2, [r3, #1]
			ul212.rawData.uartPoint++;
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012ec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		}
			break;
 80012fa:	e011      	b.n	8001320 <HAL_UART_RxCpltCallback+0xbc>
		default:
		{
			ul212.rawData.uartBufferString[ul212.rawData.uartPoint] = *ul212.rawData.uartBuffer;
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 80012fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001302:	4619      	mov	r1, r3
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 800130a:	440b      	add	r3, r1
 800130c:	705a      	strb	r2, [r3, #1]
			ul212.rawData.uartPoint++;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 8001310:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001314:	3301      	adds	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 800131a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		}
			break;
 800131e:	bf00      	nop
	}

	HAL_UART_Receive_IT(&huart1, ul212.rawData.uartBuffer, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	4904      	ldr	r1, [pc, #16]	; (8001334 <HAL_UART_RxCpltCallback+0xd0>)
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_UART_RxCpltCallback+0xd8>)
 8001326:	f002 fbf6 	bl	8003b16 <HAL_UART_Receive_IT>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000cc 	.word	0x200000cc
 8001338:	40011000 	.word	0x40011000
 800133c:	2000008c 	.word	0x2000008c

08001340 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]

}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	0000      	movs	r0, r0
	...

08001368 <UL212_DataParser>:

void UL212_DataParser(tdStructUL212 * UL212)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	tdEnumDataParser dataParser = START;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
	uint32_t temp;
	uint8_t parserPoint;
	for (parserPoint = 0; UL212->rawData.uartBufferString[parserPoint] != '#'; parserPoint++) {
 8001374:	2300      	movs	r3, #0
 8001376:	73bb      	strb	r3, [r7, #14]
 8001378:	e17d      	b.n	8001676 <UL212_DataParser+0x30e>
		if (UL212->rawData.uartBufferString[parserPoint] == ',')
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	2b2c      	cmp	r3, #44	; 0x2c
 8001384:	f040 8171 	bne.w	800166a <UL212_DataParser+0x302>
		{
			dataParser++;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	3301      	adds	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
			switch (dataParser) {
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3b01      	subs	r3, #1
 8001392:	2b06      	cmp	r3, #6
 8001394:	f200 816b 	bhi.w	800166e <UL212_DataParser+0x306>
 8001398:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <UL212_DataParser+0x38>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	080013bd 	.word	0x080013bd
 80013a4:	08001413 	.word	0x08001413
 80013a8:	08001441 	.word	0x08001441
 80013ac:	080014b9 	.word	0x080014b9
 80013b0:	0800150f 	.word	0x0800150f
 80013b4:	08001589 	.word	0x08001589
 80013b8:	08001603 	.word	0x08001603
				case VERSION:
					UL212->protocolVersion = UL212->rawData.uartBufferString[parserPoint+1] - 0x30;
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	3301      	adds	r3, #1
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	3b30      	subs	r3, #48	; 0x30
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					UL212->firmwareVersion = ((UL212->rawData.uartBufferString[parserPoint+2] - 0x30) * 10) +
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	3302      	adds	r3, #2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	461a      	mov	r2, r3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	b2da      	uxtb	r2, r3
							+ (UL212->rawData.uartBufferString[parserPoint+3]-0x30);
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	3303      	adds	r3, #3
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	440b      	add	r3, r1
 80013ec:	785b      	ldrb	r3, [r3, #1]
					UL212->firmwareVersion = ((UL212->rawData.uartBufferString[parserPoint+2] - 0x30) * 10) +
 80013ee:	4413      	add	r3, r2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3b10      	subs	r3, #16
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					UL212->hardwareVersion = UL212->rawData.uartBufferString[parserPoint+4] - 0x30;
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	3304      	adds	r3, #4
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	3b30      	subs	r3, #48	; 0x30
 8001408:	b2da      	uxtb	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				break;
 8001410:	e12e      	b.n	8001670 <UL212_DataParser+0x308>
				case MINUTE:
					UL212->minute = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 10) +
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	3301      	adds	r3, #1
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	461a      	mov	r2, r3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	b2da      	uxtb	r2, r3
							+ (UL212->rawData.uartBufferString[parserPoint+2] - 0x30);
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	3302      	adds	r3, #2
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	440b      	add	r3, r1
 800142e:	785b      	ldrb	r3, [r3, #1]
					UL212->minute = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 10) +
 8001430:	4413      	add	r3, r2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3b10      	subs	r3, #16
 8001436:	b2da      	uxtb	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					break;
 800143e:	e117      	b.n	8001670 <UL212_DataParser+0x308>
				case LIQUID_LEVEL_VALUE:
					UL212->liquidLevelValue = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 8001440:	7bbb      	ldrb	r3, [r7, #14]
 8001442:	3301      	adds	r3, #1
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	785b      	ldrb	r3, [r3, #1]
 800144a:	3b30      	subs	r3, #48	; 0x30
 800144c:	b29b      	uxth	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	0152      	lsls	r2, r2, #5
 8001452:	1ad2      	subs	r2, r2, r3
 8001454:	0092      	lsls	r2, r2, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	b29a      	uxth	r2, r3
							+ ((UL212->rawData.uartBufferString[parserPoint+2] - 0x30) * 100) +
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	3302      	adds	r3, #2
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	440b      	add	r3, r1
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	3b30      	subs	r3, #48	; 0x30
					UL212->liquidLevelValue = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 8001468:	b29b      	uxth	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	0089      	lsls	r1, r1, #2
 800146e:	440b      	add	r3, r1
 8001470:	4619      	mov	r1, r3
 8001472:	0088      	lsls	r0, r1, #2
 8001474:	4619      	mov	r1, r3
 8001476:	4603      	mov	r3, r0
 8001478:	440b      	add	r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	b29b      	uxth	r3, r3
 800147e:	4413      	add	r3, r2
 8001480:	b29a      	uxth	r2, r3
							+ ((UL212->rawData.uartBufferString[parserPoint+3] - 0x30) * 10) +
 8001482:	7bbb      	ldrb	r3, [r7, #14]
 8001484:	3303      	adds	r3, #3
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	440b      	add	r3, r1
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	3b30      	subs	r3, #48	; 0x30
							+ ((UL212->rawData.uartBufferString[parserPoint+2] - 0x30) * 100) +
 800148e:	b29b      	uxth	r3, r3
 8001490:	4619      	mov	r1, r3
 8001492:	0089      	lsls	r1, r1, #2
 8001494:	440b      	add	r3, r1
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b29a      	uxth	r2, r3
							+ (UL212->rawData.uartBufferString[parserPoint+4] - 0x30);
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	3304      	adds	r3, #4
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	440b      	add	r3, r1
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	b29b      	uxth	r3, r3
							+ ((UL212->rawData.uartBufferString[parserPoint+3] - 0x30) * 10) +
 80014aa:	4413      	add	r3, r2
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b30      	subs	r3, #48	; 0x30
 80014b0:	b29a      	uxth	r2, r3
					UL212->liquidLevelValue = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	875a      	strh	r2, [r3, #58]	; 0x3a
					break;
 80014b6:	e0db      	b.n	8001670 <UL212_DataParser+0x308>
				case SIGNAL_STRENGTH:
					UL212->signalStrength = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 10) +
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	3301      	adds	r3, #1
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	461a      	mov	r2, r3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	b2da      	uxtb	r2, r3
							+ (UL212->rawData.uartBufferString[parserPoint+2] - 0x30);
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	3302      	adds	r3, #2
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	440b      	add	r3, r1
 80014d4:	785b      	ldrb	r3, [r3, #1]
					UL212->signalStrength = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 10) +
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3b10      	subs	r3, #16
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					UL212->softwareCode = UL212->rawData.uartBufferString[parserPoint+3] - 0x30;
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	3303      	adds	r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	3b30      	subs	r3, #48	; 0x30
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					UL212->hardwareCode = UL212->rawData.uartBufferString[parserPoint+4] - 0x30;
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	3304      	adds	r3, #4
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	3b30      	subs	r3, #48	; 0x30
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					break;
 800150c:	e0b0      	b.n	8001670 <UL212_DataParser+0x308>
				case REAL_TIME_VALUE:
					UL212->realTimeValue = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	3301      	adds	r3, #1
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	3b30      	subs	r3, #48	; 0x30
 800151a:	b29b      	uxth	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	0152      	lsls	r2, r2, #5
 8001520:	1ad2      	subs	r2, r2, r3
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	b29a      	uxth	r2, r3
							+ ((UL212->rawData.uartBufferString[parserPoint+2] - 0x30) * 100) +
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	3302      	adds	r3, #2
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	440b      	add	r3, r1
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	3b30      	subs	r3, #48	; 0x30
					UL212->realTimeValue = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 8001536:	b29b      	uxth	r3, r3
 8001538:	4619      	mov	r1, r3
 800153a:	0089      	lsls	r1, r1, #2
 800153c:	440b      	add	r3, r1
 800153e:	4619      	mov	r1, r3
 8001540:	0088      	lsls	r0, r1, #2
 8001542:	4619      	mov	r1, r3
 8001544:	4603      	mov	r3, r0
 8001546:	440b      	add	r3, r1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
							+ ((UL212->rawData.uartBufferString[parserPoint+3] - 0x30) * 10) +
 8001550:	7bbb      	ldrb	r3, [r7, #14]
 8001552:	3303      	adds	r3, #3
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	440b      	add	r3, r1
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	3b30      	subs	r3, #48	; 0x30
							+ ((UL212->rawData.uartBufferString[parserPoint+2] - 0x30) * 100) +
 800155c:	b29b      	uxth	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	0089      	lsls	r1, r1, #2
 8001562:	440b      	add	r3, r1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	4413      	add	r3, r2
 800156a:	b29a      	uxth	r2, r3
							+ (UL212->rawData.uartBufferString[parserPoint+4] - 0x30);
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	3304      	adds	r3, #4
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	440b      	add	r3, r1
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	b29b      	uxth	r3, r3
							+ ((UL212->rawData.uartBufferString[parserPoint+3] - 0x30) * 10) +
 8001578:	4413      	add	r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	3b30      	subs	r3, #48	; 0x30
 800157e:	b29a      	uxth	r2, r3
					UL212->realTimeValue = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
					break;
 8001586:	e073      	b.n	8001670 <UL212_DataParser+0x308>
				case TEMPERATURE:
					temp = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	3301      	adds	r3, #1
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	3b30      	subs	r3, #48	; 0x30
 8001594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001598:	fb02 f203 	mul.w	r2, r2, r3
							+ ((UL212->rawData.uartBufferString[parserPoint+2] - 0x30) * 100) +
 800159c:	7bbb      	ldrb	r3, [r7, #14]
 800159e:	3302      	adds	r3, #2
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	440b      	add	r3, r1
 80015a4:	785b      	ldrb	r3, [r3, #1]
 80015a6:	3b30      	subs	r3, #48	; 0x30
 80015a8:	2164      	movs	r1, #100	; 0x64
 80015aa:	fb01 f303 	mul.w	r3, r1, r3
					temp = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 80015ae:	18d1      	adds	r1, r2, r3
							+ ((UL212->rawData.uartBufferString[parserPoint+3] - 0x30) * 10) +
 80015b0:	7bbb      	ldrb	r3, [r7, #14]
 80015b2:	3303      	adds	r3, #3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	785b      	ldrb	r3, [r3, #1]
 80015ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
							+ ((UL212->rawData.uartBufferString[parserPoint+2] - 0x30) * 100) +
 80015c6:	18ca      	adds	r2, r1, r3
							+ (UL212->rawData.uartBufferString[parserPoint+4] - 0x30);
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	3304      	adds	r3, #4
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	440b      	add	r3, r1
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	3b30      	subs	r3, #48	; 0x30
							+ ((UL212->rawData.uartBufferString[parserPoint+3] - 0x30) * 10) +
 80015d4:	4413      	add	r3, r2
					temp = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 1000) +
 80015d6:	60bb      	str	r3, [r7, #8]
					UL212->temperature = (temp - 400) * 0.1;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fef8 	bl	80003d4 <__aeabi_ui2d>
 80015e4:	a32c      	add	r3, pc, #176	; (adr r3, 8001698 <UL212_DataParser+0x330>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7fe ff6d 	bl	80004c8 <__aeabi_dmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	4618      	mov	r0, r3
 80015f4:	4621      	mov	r1, r4
 80015f6:	f7ff f979 	bl	80008ec <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
					break;
 8001600:	e036      	b.n	8001670 <UL212_DataParser+0x308>
				case VALID_SIGNAL:
					UL212->validSignal = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 10) +
 8001602:	7bbb      	ldrb	r3, [r7, #14]
 8001604:	3301      	adds	r3, #1
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	461a      	mov	r2, r3
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	4413      	add	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	b2da      	uxtb	r2, r3
							+ (UL212->rawData.uartBufferString[parserPoint+2] - 0x30);
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	3302      	adds	r3, #2
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	440b      	add	r3, r1
 800161e:	785b      	ldrb	r3, [r3, #1]
					UL212->validSignal = ((UL212->rawData.uartBufferString[parserPoint+1] - 0x30) * 10) +
 8001620:	4413      	add	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3b10      	subs	r3, #16
 8001626:	b2da      	uxtb	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
					UL212->tiltAngle = (AsciiToHex(UL212->rawData.uartBufferString[parserPoint+3]) * 0x0f) +
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	3303      	adds	r3, #3
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	785b      	ldrb	r3, [r3, #1]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f8f5 	bl	8001828 <AsciiToHex>
 800163e:	4603      	mov	r3, r0
 8001640:	b29b      	uxth	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	b29c      	uxth	r4, r3
							AsciiToHex(UL212->rawData.uartBufferString[parserPoint+4]);
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	3304      	adds	r3, #4
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f8e7 	bl	8001828 <AsciiToHex>
 800165a:	4603      	mov	r3, r0
 800165c:	b29b      	uxth	r3, r3
					UL212->tiltAngle = (AsciiToHex(UL212->rawData.uartBufferString[parserPoint+3]) * 0x0f) +
 800165e:	4423      	add	r3, r4
 8001660:	b29a      	uxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				    break;
 8001668:	e002      	b.n	8001670 <UL212_DataParser+0x308>
				default:
					break;
			}
		}
 800166a:	bf00      	nop
 800166c:	e000      	b.n	8001670 <UL212_DataParser+0x308>
					break;
 800166e:	bf00      	nop
	for (parserPoint = 0; UL212->rawData.uartBufferString[parserPoint] != '#'; parserPoint++) {
 8001670:	7bbb      	ldrb	r3, [r7, #14]
 8001672:	3301      	adds	r3, #1
 8001674:	73bb      	strb	r3, [r7, #14]
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	785b      	ldrb	r3, [r3, #1]
 800167e:	2b23      	cmp	r3, #35	; 0x23
 8001680:	f47f ae7b 	bne.w	800137a <UL212_DataParser+0x12>
	}
	UL212->rawData.uartFlagEndString = FALSE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	9999999a 	.word	0x9999999a
 800169c:	3fb99999 	.word	0x3fb99999

080016a0 <UL212_LedInit>:


void UL212_LedInit(tdEnumStatusLed  STATUS_LED)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <UL212_LedInit+0x30>)
 80016b2:	f001 f84c 	bl	800274e <HAL_GPIO_WritePin>
	  ul212.statusLed = STATUS_LED;
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <UL212_LedInit+0x34>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	  ul212.counterLed = STATUS_LED * 2;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <UL212_LedInit+0x34>)
 80016c6:	655a      	str	r2, [r3, #84]	; 0x54
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40011000 	.word	0x40011000
 80016d4:	200000cc 	.word	0x200000cc

080016d8 <UL212_LedHandler>:

void UL212_LedHandler(tdStructUL212 * UL212)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]


	switch (UL212->statusLed) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d000      	beq.n	80016ec <UL212_LedHandler+0x14>
				UL212->counterLed--;

			}
			break;
		default:
			break;
 80016ea:	e018      	b.n	800171e <UL212_LedHandler+0x46>
			if (HAL_GetTick() > periodLed)
 80016ec:	f000 fb30 	bl	8001d50 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <UL212_LedHandler+0x60>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d910      	bls.n	800171c <UL212_LedHandler+0x44>
				periodLed = HAL_GetTick() + LED_DELAY;
 80016fa:	f000 fb29 	bl	8001d50 <HAL_GetTick>
 80016fe:	4603      	mov	r3, r0
 8001700:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <UL212_LedHandler+0x60>)
 8001706:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170c:	480b      	ldr	r0, [pc, #44]	; (800173c <UL212_LedHandler+0x64>)
 800170e:	f001 f836 	bl	800277e <HAL_GPIO_TogglePin>
				UL212->counterLed--;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001716:	1e5a      	subs	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
			break;
 800171c:	bf00      	nop
	}
	if (UL212->counterLed == 0)UL212->statusLed = LED_OK;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <UL212_LedHandler+0x56>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000130 	.word	0x20000130
 800173c:	40011000 	.word	0x40011000

08001740 <UL212_FrequencyOut>:

void UL212_FrequencyOut(int32_t frequency)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	//int32_t prescellar = -1 * frequency + 2000;
	int32_t prescellar = 72000000/(frequency * 2 * 48);// 48 : Предделитель таймера
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	015b      	lsls	r3, r3, #5
 8001752:	461a      	mov	r2, r3
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <UL212_FrequencyOut+0x30>)
 8001756:	fb93 f3f2 	sdiv	r3, r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
	TIM4->PSC = prescellar - 1;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e5a      	subs	r2, r3, #1
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <UL212_FrequencyOut+0x34>)
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	044aa200 	.word	0x044aa200
 8001774:	40000800 	.word	0x40000800

08001778 <UL212_Init>:

void UL212_Init(tdStructUL212 * UL212)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	UL212->protocolVersion = 0;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	UL212->firmwareVersion = 0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	UL212->hardwareVersion = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	UL212->minute = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	UL212->liquidLevelValue = 1600;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80017a6:	875a      	strh	r2, [r3, #58]	; 0x3a
	UL212->signalStrength = 0;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	UL212->softwareCode = SW_WEAK_SIGNAL;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	UL212->hardwareCode = HW_SENSOR_DISCONNECT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	UL212->realTimeValue = 0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	UL212->temperature = 0.0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	645a      	str	r2, [r3, #68]	; 0x44
	UL212->validSignal = 0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	UL212->tiltAngle = 0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	UL212->calibration = NOT_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	UL212->valueUp = FlashRead(SETTINGS_PAGE);
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <UL212_Init+0xa8>)
 80017ea:	f000 f8f7 	bl	80019dc <FlashRead>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	UL212->coeficient = (float)1000/(float)UL212->valueUp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f97a 	bl	8000af8 <__aeabi_ui2f>
 8001804:	4603      	mov	r3, r0
 8001806:	4619      	mov	r1, r3
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <UL212_Init+0xac>)
 800180a:	f7ff fa81 	bl	8000d10 <__aeabi_fdiv>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	65da      	str	r2, [r3, #92]	; 0x5c

}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	08007c00 	.word	0x08007c00
 8001824:	447a0000 	.word	0x447a0000

08001828 <AsciiToHex>:

uint8_t AsciiToHex (char simbol)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	switch (simbol) {
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	3b30      	subs	r3, #48	; 0x30
 8001836:	2b36      	cmp	r3, #54	; 0x36
 8001838:	f200 8092 	bhi.w	8001960 <AsciiToHex+0x138>
 800183c:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <AsciiToHex+0x1c>)
 800183e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001842:	bf00      	nop
 8001844:	08001921 	.word	0x08001921
 8001848:	08001925 	.word	0x08001925
 800184c:	08001929 	.word	0x08001929
 8001850:	0800192d 	.word	0x0800192d
 8001854:	08001931 	.word	0x08001931
 8001858:	08001935 	.word	0x08001935
 800185c:	08001939 	.word	0x08001939
 8001860:	0800193d 	.word	0x0800193d
 8001864:	08001941 	.word	0x08001941
 8001868:	08001945 	.word	0x08001945
 800186c:	08001961 	.word	0x08001961
 8001870:	08001961 	.word	0x08001961
 8001874:	08001961 	.word	0x08001961
 8001878:	08001961 	.word	0x08001961
 800187c:	08001961 	.word	0x08001961
 8001880:	08001961 	.word	0x08001961
 8001884:	08001961 	.word	0x08001961
 8001888:	08001949 	.word	0x08001949
 800188c:	0800194d 	.word	0x0800194d
 8001890:	08001951 	.word	0x08001951
 8001894:	08001955 	.word	0x08001955
 8001898:	08001959 	.word	0x08001959
 800189c:	0800195d 	.word	0x0800195d
 80018a0:	08001961 	.word	0x08001961
 80018a4:	08001961 	.word	0x08001961
 80018a8:	08001961 	.word	0x08001961
 80018ac:	08001961 	.word	0x08001961
 80018b0:	08001961 	.word	0x08001961
 80018b4:	08001961 	.word	0x08001961
 80018b8:	08001961 	.word	0x08001961
 80018bc:	08001961 	.word	0x08001961
 80018c0:	08001961 	.word	0x08001961
 80018c4:	08001961 	.word	0x08001961
 80018c8:	08001961 	.word	0x08001961
 80018cc:	08001961 	.word	0x08001961
 80018d0:	08001961 	.word	0x08001961
 80018d4:	08001961 	.word	0x08001961
 80018d8:	08001961 	.word	0x08001961
 80018dc:	08001961 	.word	0x08001961
 80018e0:	08001961 	.word	0x08001961
 80018e4:	08001961 	.word	0x08001961
 80018e8:	08001961 	.word	0x08001961
 80018ec:	08001961 	.word	0x08001961
 80018f0:	08001961 	.word	0x08001961
 80018f4:	08001961 	.word	0x08001961
 80018f8:	08001961 	.word	0x08001961
 80018fc:	08001961 	.word	0x08001961
 8001900:	08001961 	.word	0x08001961
 8001904:	08001961 	.word	0x08001961
 8001908:	08001949 	.word	0x08001949
 800190c:	0800194d 	.word	0x0800194d
 8001910:	08001951 	.word	0x08001951
 8001914:	08001955 	.word	0x08001955
 8001918:	08001959 	.word	0x08001959
 800191c:	0800195d 	.word	0x0800195d
		case '0': return 0x00;
 8001920:	2300      	movs	r3, #0
 8001922:	e01e      	b.n	8001962 <AsciiToHex+0x13a>
		case '1': return 0x01;
 8001924:	2301      	movs	r3, #1
 8001926:	e01c      	b.n	8001962 <AsciiToHex+0x13a>
		case '2': return 0x02;
 8001928:	2302      	movs	r3, #2
 800192a:	e01a      	b.n	8001962 <AsciiToHex+0x13a>
		case '3': return 0x03;
 800192c:	2303      	movs	r3, #3
 800192e:	e018      	b.n	8001962 <AsciiToHex+0x13a>
		case '4': return 0x04;
 8001930:	2304      	movs	r3, #4
 8001932:	e016      	b.n	8001962 <AsciiToHex+0x13a>
		case '5': return 0x05;
 8001934:	2305      	movs	r3, #5
 8001936:	e014      	b.n	8001962 <AsciiToHex+0x13a>
		case '6': return 0x06;
 8001938:	2306      	movs	r3, #6
 800193a:	e012      	b.n	8001962 <AsciiToHex+0x13a>
		case '7': return 0x07;
 800193c:	2307      	movs	r3, #7
 800193e:	e010      	b.n	8001962 <AsciiToHex+0x13a>
		case '8': return 0x08;
 8001940:	2308      	movs	r3, #8
 8001942:	e00e      	b.n	8001962 <AsciiToHex+0x13a>
		case '9': return 0x09;
 8001944:	2309      	movs	r3, #9
 8001946:	e00c      	b.n	8001962 <AsciiToHex+0x13a>
		case 'a': case 'A': return 0x0a;
 8001948:	230a      	movs	r3, #10
 800194a:	e00a      	b.n	8001962 <AsciiToHex+0x13a>
		case 'b': case 'B': return 0x0b;
 800194c:	230b      	movs	r3, #11
 800194e:	e008      	b.n	8001962 <AsciiToHex+0x13a>
		case 'c': case 'C': return 0x0c;
 8001950:	230c      	movs	r3, #12
 8001952:	e006      	b.n	8001962 <AsciiToHex+0x13a>
		case 'd': case 'D': return 0x0d;
 8001954:	230d      	movs	r3, #13
 8001956:	e004      	b.n	8001962 <AsciiToHex+0x13a>
		case 'e': case 'E': return 0x0e;
 8001958:	230e      	movs	r3, #14
 800195a:	e002      	b.n	8001962 <AsciiToHex+0x13a>
		case 'f': case 'F': return 0x0f;
 800195c:	230f      	movs	r3, #15
 800195e:	e000      	b.n	8001962 <AsciiToHex+0x13a>
		default: return 0xff;
 8001960:	23ff      	movs	r3, #255	; 0xff
	}
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <FlashWriteSettings>:

void FlashWriteSettings(uint32_t data, uint32_t page)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8001976:	f000 fbe9 	bl	800214c <HAL_FLASH_Unlock>
	hflash.TypeErase = FLASH_TYPEERASE_PAGES;
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <FlashWriteSettings+0x68>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
	hflash.PageAddress = page;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <FlashWriteSettings+0x68>)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6093      	str	r3, [r2, #8]
	hflash.NbPages = 1;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <FlashWriteSettings+0x68>)
 8001988:	2201      	movs	r2, #1
 800198a:	60da      	str	r2, [r3, #12]
	FLASH_WaitForLastOperation(500);
 800198c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001990:	f000 fc2e 	bl	80021f0 <FLASH_WaitForLastOperation>
	HAL_FLASHEx_Erase(&hflash, &hPageError);
 8001994:	4910      	ldr	r1, [pc, #64]	; (80019d8 <FlashWriteSettings+0x6c>)
 8001996:	480f      	ldr	r0, [pc, #60]	; (80019d4 <FlashWriteSettings+0x68>)
 8001998:	f000 fcc0 	bl	800231c <HAL_FLASHEx_Erase>
	FLASH_WaitForLastOperation(500);
 800199c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a0:	f000 fc26 	bl	80021f0 <FLASH_WaitForLastOperation>
	while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, page, data) != HAL_OK);
 80019a4:	bf00      	nop
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	2002      	movs	r0, #2
 80019b4:	f000 fb5a 	bl	800206c <HAL_FLASH_Program>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f3      	bne.n	80019a6 <FlashWriteSettings+0x3a>
	FLASH_WaitForLastOperation(500);
 80019be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c2:	f000 fc15 	bl	80021f0 <FLASH_WaitForLastOperation>
	HAL_FLASH_Lock();
 80019c6:	f000 fbe7 	bl	8002198 <HAL_FLASH_Lock>


}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000007c 	.word	0x2000007c
 80019d8:	2000012c 	.word	0x2000012c

080019dc <FlashRead>:

uint32_t FlashRead (uint32_t addr)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	return (*(__IO uint32_t*) addr);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_MspInit+0x60>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_MspInit+0x60>)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000

08001a64 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <HAL_TIM_OC_MspInit+0x44>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d113      	bne.n	8001a9e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_TIM_OC_MspInit+0x48>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_TIM_OC_MspInit+0x48>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_TIM_OC_MspInit+0x48>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	201e      	movs	r0, #30
 8001a94:	f000 fa3d 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a98:	201e      	movs	r0, #30
 8001a9a:	f000 fa56 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40000800 	.word	0x40000800
 8001aac:	40021000 	.word	0x40021000

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <HAL_TIM_MspPostInit+0x58>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d117      	bne.n	8001b00 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_TIM_MspPostInit+0x5c>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_TIM_MspPostInit+0x5c>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_TIM_MspPostInit+0x5c>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ae8:	2340      	movs	r3, #64	; 0x40
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_TIM_MspPostInit+0x60>)
 8001afc:	f000 fcb6 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40000800 	.word	0x40000800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010c00 	.word	0x40010c00

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_UART_MspInit+0x9c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d139      	bne.n	8001ba8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4619      	mov	r1, r3
 8001b78:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <HAL_UART_MspInit+0xa4>)
 8001b7a:	f000 fc77 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4619      	mov	r1, r3
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <HAL_UART_MspInit+0xa4>)
 8001b94:	f000 fc6a 	bl	800246c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2025      	movs	r0, #37	; 0x25
 8001b9e:	f000 f9b8 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ba2:	2025      	movs	r0, #37	; 0x25
 8001ba4:	f000 f9d1 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010800 	.word	0x40010800

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <HardFault_Handler+0x4>

08001bce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <UsageFault_Handler+0x4>

08001be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 f890 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM4_IRQHandler+0x10>)
 8001c16:	f001 fb37 	bl	8003288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000034 	.word	0x20000034

08001c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USART1_IRQHandler+0x10>)
 8001c2a:	f001 ffc9 	bl	8003bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000008c 	.word	0x2000008c

08001c38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c40:	f000 fdb6 	bl	80027b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c56:	e003      	b.n	8001c60 <LoopCopyDataInit>

08001c58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c5e:	3104      	adds	r1, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c60:	480a      	ldr	r0, [pc, #40]	; (8001c8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c68:	d3f6      	bcc.n	8001c58 <CopyDataInit>
  ldr r2, =_sbss
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c6c:	e002      	b.n	8001c74 <LoopFillZerobss>

08001c6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c70:	f842 3b04 	str.w	r3, [r2], #4

08001c74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c78:	d3f9      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c7a:	f7ff ffe5 	bl	8001c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f002 fa57 	bl	8004130 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c82:	f7ff f8e1 	bl	8000e48 <main>
  bx lr
 8001c86:	4770      	bx	lr
  ldr r3, =_sidata
 8001c88:	080041d4 	.word	0x080041d4
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c90:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001c94:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001c98:	20000158 	.word	0x20000158

08001c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC1_2_IRQHandler>
	...

08001ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_Init+0x28>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_Init+0x28>)
 8001caa:	f043 0310 	orr.w	r3, r3, #16
 8001cae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 f923 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f000 f808 	bl	8001ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cbc:	f7ff fea0 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40022000 	.word	0x40022000

08001ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x54>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x58>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f93b 	bl	8001f66 <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d08:	f000 f903 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <HAL_InitTick+0x5c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x1c>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_IncTick+0x20>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_IncTick+0x20>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000134 	.word	0x20000134

08001d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <HAL_GetTick+0x10>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	20000134 	.word	0x20000134

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <__NVIC_EnableIRQ+0x34>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001edc:	f7ff ff90 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff2d 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff42 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff90 	bl	8001e54 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5f 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff35 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d005      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e051      	b.n	8002046 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 020e 	bic.w	r2, r2, #14
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_DMA_Abort_IT+0xd0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d029      	beq.n	8002020 <HAL_DMA_Abort_IT+0xa0>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <HAL_DMA_Abort_IT+0xd4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d022      	beq.n	800201c <HAL_DMA_Abort_IT+0x9c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_DMA_Abort_IT+0xd8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d01a      	beq.n	8002016 <HAL_DMA_Abort_IT+0x96>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_DMA_Abort_IT+0xdc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d012      	beq.n	8002010 <HAL_DMA_Abort_IT+0x90>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_DMA_Abort_IT+0xe0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00a      	beq.n	800200a <HAL_DMA_Abort_IT+0x8a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <HAL_DMA_Abort_IT+0xe4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d102      	bne.n	8002004 <HAL_DMA_Abort_IT+0x84>
 8001ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002002:	e00e      	b.n	8002022 <HAL_DMA_Abort_IT+0xa2>
 8002004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002008:	e00b      	b.n	8002022 <HAL_DMA_Abort_IT+0xa2>
 800200a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800200e:	e008      	b.n	8002022 <HAL_DMA_Abort_IT+0xa2>
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	e005      	b.n	8002022 <HAL_DMA_Abort_IT+0xa2>
 8002016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201a:	e002      	b.n	8002022 <HAL_DMA_Abort_IT+0xa2>
 800201c:	2310      	movs	r3, #16
 800201e:	e000      	b.n	8002022 <HAL_DMA_Abort_IT+0xa2>
 8002020:	2301      	movs	r3, #1
 8002022:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_DMA_Abort_IT+0xe8>)
 8002024:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
    } 
  }
  return status;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40020008 	.word	0x40020008
 8002054:	4002001c 	.word	0x4002001c
 8002058:	40020030 	.word	0x40020030
 800205c:	40020044 	.word	0x40020044
 8002060:	40020058 	.word	0x40020058
 8002064:	4002006c 	.word	0x4002006c
 8002068:	40020000 	.word	0x40020000

0800206c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002086:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <HAL_FLASH_Program+0xd8>)
 8002088:	7e1b      	ldrb	r3, [r3, #24]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_FLASH_Program+0x26>
 800208e:	2302      	movs	r3, #2
 8002090:	e054      	b.n	800213c <HAL_FLASH_Program+0xd0>
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_FLASH_Program+0xd8>)
 8002094:	2201      	movs	r2, #1
 8002096:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800209c:	f000 f8a8 	bl	80021f0 <FLASH_WaitForLastOperation>
 80020a0:	4603      	mov	r3, r0
 80020a2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d144      	bne.n	8002134 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d102      	bne.n	80020b6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80020b0:	2301      	movs	r3, #1
 80020b2:	757b      	strb	r3, [r7, #21]
 80020b4:	e007      	b.n	80020c6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d102      	bne.n	80020c2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80020bc:	2302      	movs	r3, #2
 80020be:	757b      	strb	r3, [r7, #21]
 80020c0:	e001      	b.n	80020c6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80020c2:	2304      	movs	r3, #4
 80020c4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	75bb      	strb	r3, [r7, #22]
 80020ca:	e02d      	b.n	8002128 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020cc:	7dbb      	ldrb	r3, [r7, #22]
 80020ce:	005a      	lsls	r2, r3, #1
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	eb02 0c03 	add.w	ip, r2, r3
 80020d6:	7dbb      	ldrb	r3, [r7, #22]
 80020d8:	0119      	lsls	r1, r3, #4
 80020da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020de:	f1c1 0620 	rsb	r6, r1, #32
 80020e2:	f1a1 0020 	sub.w	r0, r1, #32
 80020e6:	fa22 f401 	lsr.w	r4, r2, r1
 80020ea:	fa03 f606 	lsl.w	r6, r3, r6
 80020ee:	4334      	orrs	r4, r6
 80020f0:	fa23 f000 	lsr.w	r0, r3, r0
 80020f4:	4304      	orrs	r4, r0
 80020f6:	fa23 f501 	lsr.w	r5, r3, r1
 80020fa:	b2a3      	uxth	r3, r4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4660      	mov	r0, ip
 8002100:	f000 f85a 	bl	80021b8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002104:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002108:	f000 f872 	bl	80021f0 <FLASH_WaitForLastOperation>
 800210c:	4603      	mov	r3, r0
 800210e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_FLASH_Program+0xdc>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <HAL_FLASH_Program+0xdc>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002122:	7dbb      	ldrb	r3, [r7, #22]
 8002124:	3301      	adds	r3, #1
 8002126:	75bb      	strb	r3, [r7, #22]
 8002128:	7dba      	ldrb	r2, [r7, #22]
 800212a:	7d7b      	ldrb	r3, [r7, #21]
 800212c:	429a      	cmp	r2, r3
 800212e:	d3cd      	bcc.n	80020cc <HAL_FLASH_Program+0x60>
 8002130:	e000      	b.n	8002134 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002132:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_FLASH_Program+0xd8>)
 8002136:	2200      	movs	r2, #0
 8002138:	761a      	strb	r2, [r3, #24]

  return status;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002144:	20000138 	.word	0x20000138
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_FLASH_Unlock+0x40>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_FLASH_Unlock+0x40>)
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_FLASH_Unlock+0x44>)
 8002166:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_FLASH_Unlock+0x40>)
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_FLASH_Unlock+0x48>)
 800216c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_FLASH_Unlock+0x40>)
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800217e:	79fb      	ldrb	r3, [r7, #7]
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000
 8002190:	45670123 	.word	0x45670123
 8002194:	cdef89ab 	.word	0xcdef89ab

08002198 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_FLASH_Lock+0x1c>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_FLASH_Lock+0x1c>)
 80021a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000

080021b8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <FLASH_Program_HalfWord+0x30>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <FLASH_Program_HalfWord+0x34>)
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <FLASH_Program_HalfWord+0x34>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	887a      	ldrh	r2, [r7, #2]
 80021da:	801a      	strh	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000138 	.word	0x20000138
 80021ec:	40022000 	.word	0x40022000

080021f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff fdaa 	bl	8001d50 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80021fe:	e010      	b.n	8002222 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002206:	d00c      	beq.n	8002222 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <FLASH_WaitForLastOperation+0x2e>
 800220e:	f7ff fd9f 	bl	8001d50 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	d201      	bcs.n	8002222 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e025      	b.n	800226e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <FLASH_WaitForLastOperation+0x88>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e8      	bne.n	8002200 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <FLASH_WaitForLastOperation+0x88>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <FLASH_WaitForLastOperation+0x88>)
 800223c:	2220      	movs	r2, #32
 800223e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <FLASH_WaitForLastOperation+0x88>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <FLASH_WaitForLastOperation+0x88>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <FLASH_WaitForLastOperation+0x88>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002264:	f000 f80a 	bl	800227c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000

0800227c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <FLASH_SetErrorCode+0x98>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <FLASH_SetErrorCode+0x9c>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <FLASH_SetErrorCode+0x9c>)
 800229c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <FLASH_SetErrorCode+0x98>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <FLASH_SetErrorCode+0x9c>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	4a17      	ldr	r2, [pc, #92]	; (8002318 <FLASH_SetErrorCode+0x9c>)
 80022bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <FLASH_SetErrorCode+0x98>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <FLASH_SetErrorCode+0x9c>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <FLASH_SetErrorCode+0x9c>)
 80022dc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <FLASH_SetErrorCode+0x98>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <FLASH_SetErrorCode+0x98>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f240 1201 	movw	r2, #257	; 0x101
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d106      	bne.n	8002302 <FLASH_SetErrorCode+0x86>
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <FLASH_SetErrorCode+0x98>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <FLASH_SetErrorCode+0x98>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	61d3      	str	r3, [r2, #28]
}  
 8002300:	e002      	b.n	8002308 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <FLASH_SetErrorCode+0x98>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	60d3      	str	r3, [r2, #12]
}  
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40022000 	.word	0x40022000
 8002318:	20000138 	.word	0x20000138

0800231c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800232e:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_FLASHEx_Erase+0xd0>)
 8002330:	7e1b      	ldrb	r3, [r3, #24]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_FLASHEx_Erase+0x1e>
 8002336:	2302      	movs	r3, #2
 8002338:	e053      	b.n	80023e2 <HAL_FLASHEx_Erase+0xc6>
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_FLASHEx_Erase+0xd0>)
 800233c:	2201      	movs	r2, #1
 800233e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d116      	bne.n	8002376 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002348:	f24c 3050 	movw	r0, #50000	; 0xc350
 800234c:	f7ff ff50 	bl	80021f0 <FLASH_WaitForLastOperation>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d141      	bne.n	80023da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002356:	2001      	movs	r0, #1
 8002358:	f000 f84c 	bl	80023f4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800235c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002360:	f7ff ff46 	bl	80021f0 <FLASH_WaitForLastOperation>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_FLASHEx_Erase+0xd4>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_FLASHEx_Erase+0xd4>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6113      	str	r3, [r2, #16]
 8002374:	e031      	b.n	80023da <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002376:	f24c 3050 	movw	r0, #50000	; 0xc350
 800237a:	f7ff ff39 	bl	80021f0 <FLASH_WaitForLastOperation>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d12a      	bne.n	80023da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800238a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	e019      	b.n	80023c8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002394:	68b8      	ldr	r0, [r7, #8]
 8002396:	f000 f849 	bl	800242c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800239a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800239e:	f7ff ff27 	bl	80021f0 <FLASH_WaitForLastOperation>
 80023a2:	4603      	mov	r3, r0
 80023a4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_FLASHEx_Erase+0xd4>)
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_FLASHEx_Erase+0xd4>)
 80023ac:	f023 0302 	bic.w	r3, r3, #2
 80023b0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	601a      	str	r2, [r3, #0]
            break;
 80023be:	e00c      	b.n	80023da <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	029a      	lsls	r2, r3, #10
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3dc      	bcc.n	8002394 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_FLASHEx_Erase+0xd0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	761a      	strb	r2, [r3, #24]

  return status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000138 	.word	0x20000138
 80023f0:	40022000 	.word	0x40022000

080023f4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <FLASH_MassErase+0x30>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <FLASH_MassErase+0x34>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <FLASH_MassErase+0x34>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <FLASH_MassErase+0x34>)
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <FLASH_MassErase+0x34>)
 8002414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002418:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	20000138 	.word	0x20000138
 8002428:	40022000 	.word	0x40022000

0800242c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <FLASH_PageErase+0x38>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <FLASH_PageErase+0x3c>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <FLASH_PageErase+0x3c>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <FLASH_PageErase+0x3c>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <FLASH_PageErase+0x3c>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	4a05      	ldr	r2, [pc, #20]	; (8002468 <FLASH_PageErase+0x3c>)
 8002452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002456:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000138 	.word	0x20000138
 8002468:	40022000 	.word	0x40022000

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b08b      	sub	sp, #44	; 0x2c
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e127      	b.n	80026d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002480:	2201      	movs	r2, #1
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8116 	bne.w	80026ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d034      	beq.n	8002510 <HAL_GPIO_Init+0xa4>
 80024a6:	2b12      	cmp	r3, #18
 80024a8:	d80d      	bhi.n	80024c6 <HAL_GPIO_Init+0x5a>
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d02b      	beq.n	8002506 <HAL_GPIO_Init+0x9a>
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d804      	bhi.n	80024bc <HAL_GPIO_Init+0x50>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d031      	beq.n	800251a <HAL_GPIO_Init+0xae>
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d01c      	beq.n	80024f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024ba:	e048      	b.n	800254e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d043      	beq.n	8002548 <HAL_GPIO_Init+0xdc>
 80024c0:	2b11      	cmp	r3, #17
 80024c2:	d01b      	beq.n	80024fc <HAL_GPIO_Init+0x90>
          break;
 80024c4:	e043      	b.n	800254e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024c6:	4a89      	ldr	r2, [pc, #548]	; (80026ec <HAL_GPIO_Init+0x280>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d026      	beq.n	800251a <HAL_GPIO_Init+0xae>
 80024cc:	4a87      	ldr	r2, [pc, #540]	; (80026ec <HAL_GPIO_Init+0x280>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d806      	bhi.n	80024e0 <HAL_GPIO_Init+0x74>
 80024d2:	4a87      	ldr	r2, [pc, #540]	; (80026f0 <HAL_GPIO_Init+0x284>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d020      	beq.n	800251a <HAL_GPIO_Init+0xae>
 80024d8:	4a86      	ldr	r2, [pc, #536]	; (80026f4 <HAL_GPIO_Init+0x288>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01d      	beq.n	800251a <HAL_GPIO_Init+0xae>
          break;
 80024de:	e036      	b.n	800254e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024e0:	4a85      	ldr	r2, [pc, #532]	; (80026f8 <HAL_GPIO_Init+0x28c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <HAL_GPIO_Init+0xae>
 80024e6:	4a85      	ldr	r2, [pc, #532]	; (80026fc <HAL_GPIO_Init+0x290>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d016      	beq.n	800251a <HAL_GPIO_Init+0xae>
 80024ec:	4a84      	ldr	r2, [pc, #528]	; (8002700 <HAL_GPIO_Init+0x294>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0xae>
          break;
 80024f2:	e02c      	b.n	800254e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	623b      	str	r3, [r7, #32]
          break;
 80024fa:	e028      	b.n	800254e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	3304      	adds	r3, #4
 8002502:	623b      	str	r3, [r7, #32]
          break;
 8002504:	e023      	b.n	800254e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	3308      	adds	r3, #8
 800250c:	623b      	str	r3, [r7, #32]
          break;
 800250e:	e01e      	b.n	800254e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	330c      	adds	r3, #12
 8002516:	623b      	str	r3, [r7, #32]
          break;
 8002518:	e019      	b.n	800254e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002522:	2304      	movs	r3, #4
 8002524:	623b      	str	r3, [r7, #32]
          break;
 8002526:	e012      	b.n	800254e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002530:	2308      	movs	r3, #8
 8002532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	611a      	str	r2, [r3, #16]
          break;
 800253a:	e008      	b.n	800254e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800253c:	2308      	movs	r3, #8
 800253e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	615a      	str	r2, [r3, #20]
          break;
 8002546:	e002      	b.n	800254e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
          break;
 800254c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2bff      	cmp	r3, #255	; 0xff
 8002552:	d801      	bhi.n	8002558 <HAL_GPIO_Init+0xec>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	e001      	b.n	800255c <HAL_GPIO_Init+0xf0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2bff      	cmp	r3, #255	; 0xff
 8002562:	d802      	bhi.n	800256a <HAL_GPIO_Init+0xfe>
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x104>
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	3b08      	subs	r3, #8
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	210f      	movs	r1, #15
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	401a      	ands	r2, r3
 8002582:	6a39      	ldr	r1, [r7, #32]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	431a      	orrs	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8096 	beq.w	80026ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800259e:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_GPIO_Init+0x298>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_GPIO_Init+0x298>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6193      	str	r3, [r2, #24]
 80025aa:	4b56      	ldr	r3, [pc, #344]	; (8002704 <HAL_GPIO_Init+0x298>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025b6:	4a54      	ldr	r2, [pc, #336]	; (8002708 <HAL_GPIO_Init+0x29c>)
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4b      	ldr	r2, [pc, #300]	; (800270c <HAL_GPIO_Init+0x2a0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x19e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <HAL_GPIO_Init+0x2a4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x19a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a49      	ldr	r2, [pc, #292]	; (8002714 <HAL_GPIO_Init+0x2a8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x196>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a48      	ldr	r2, [pc, #288]	; (8002718 <HAL_GPIO_Init+0x2ac>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x192>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x1a0>
 80025fe:	2304      	movs	r3, #4
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x1a0>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x1a0>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x1a0>
 800260a:	2300      	movs	r3, #0
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800261c:	493a      	ldr	r1, [pc, #232]	; (8002708 <HAL_GPIO_Init+0x29c>)
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_GPIO_Init+0x2b0>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4938      	ldr	r1, [pc, #224]	; (800271c <HAL_GPIO_Init+0x2b0>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
 8002642:	e006      	b.n	8002652 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002644:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_GPIO_Init+0x2b0>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	4933      	ldr	r1, [pc, #204]	; (800271c <HAL_GPIO_Init+0x2b0>)
 800264e:	4013      	ands	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_GPIO_Init+0x2b0>)
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	492e      	ldr	r1, [pc, #184]	; (800271c <HAL_GPIO_Init+0x2b0>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
 800266a:	e006      	b.n	800267a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_GPIO_Init+0x2b0>)
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	43db      	mvns	r3, r3
 8002674:	4929      	ldr	r1, [pc, #164]	; (800271c <HAL_GPIO_Init+0x2b0>)
 8002676:	4013      	ands	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_GPIO_Init+0x2b0>)
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	4924      	ldr	r1, [pc, #144]	; (800271c <HAL_GPIO_Init+0x2b0>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
 8002692:	e006      	b.n	80026a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_GPIO_Init+0x2b0>)
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	43db      	mvns	r3, r3
 800269c:	491f      	ldr	r1, [pc, #124]	; (800271c <HAL_GPIO_Init+0x2b0>)
 800269e:	4013      	ands	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	491a      	ldr	r1, [pc, #104]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
 80026ba:	e006      	b.n	80026ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	4915      	ldr	r1, [pc, #84]	; (800271c <HAL_GPIO_Init+0x2b0>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	3301      	adds	r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f47f aed0 	bne.w	8002480 <HAL_GPIO_Init+0x14>
  }
}
 80026e0:	bf00      	nop
 80026e2:	372c      	adds	r7, #44	; 0x2c
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	10210000 	.word	0x10210000
 80026f0:	10110000 	.word	0x10110000
 80026f4:	10120000 	.word	0x10120000
 80026f8:	10310000 	.word	0x10310000
 80026fc:	10320000 	.word	0x10320000
 8002700:	10220000 	.word	0x10220000
 8002704:	40021000 	.word	0x40021000
 8002708:	40010000 	.word	0x40010000
 800270c:	40010800 	.word	0x40010800
 8002710:	40010c00 	.word	0x40010c00
 8002714:	40011000 	.word	0x40011000
 8002718:	40011400 	.word	0x40011400
 800271c:	40010400 	.word	0x40010400

08002720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e001      	b.n	8002742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	807b      	strh	r3, [r7, #2]
 800275a:	4613      	mov	r3, r2
 800275c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275e:	787b      	ldrb	r3, [r7, #1]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002764:	887a      	ldrh	r2, [r7, #2]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800276a:	e003      	b.n	8002774 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	611a      	str	r2, [r3, #16]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002790:	887a      	ldrh	r2, [r7, #2]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	041a      	lsls	r2, r3, #16
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43d9      	mvns	r1, r3
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	400b      	ands	r3, r1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fd36 	bl	8001240 <HAL_GPIO_EXTI_Callback>
  }
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e26c      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8087 	beq.w	800290e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002800:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b04      	cmp	r3, #4
 800280a:	d00c      	beq.n	8002826 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800280c:	4b8f      	ldr	r3, [pc, #572]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d112      	bne.n	800283e <HAL_RCC_OscConfig+0x5e>
 8002818:	4b8c      	ldr	r3, [pc, #560]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d10b      	bne.n	800283e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002826:	4b89      	ldr	r3, [pc, #548]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d06c      	beq.n	800290c <HAL_RCC_OscConfig+0x12c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d168      	bne.n	800290c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e246      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x76>
 8002848:	4b80      	ldr	r3, [pc, #512]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a7f      	ldr	r2, [pc, #508]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	e02e      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x98>
 800285e:	4b7b      	ldr	r3, [pc, #492]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7a      	ldr	r2, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b78      	ldr	r3, [pc, #480]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a77      	ldr	r2, [pc, #476]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e01d      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0xbc>
 8002882:	4b72      	ldr	r3, [pc, #456]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a71      	ldr	r2, [pc, #452]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 800289c:	4b6b      	ldr	r3, [pc, #428]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6a      	ldr	r2, [pc, #424]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a67      	ldr	r2, [pc, #412]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fa48 	bl	8001d50 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff fa44 	bl	8001d50 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1fa      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe4>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff fa34 	bl	8001d50 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7ff fa30 	bl	8001d50 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1e6      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x10c>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800291a:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b08      	cmp	r3, #8
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x18c>
 8002932:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d116      	bne.n	800296c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x176>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1ba      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4939      	ldr	r1, [pc, #228]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	e03a      	b.n	80029e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_RCC_OscConfig+0x270>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7ff f9e9 	bl	8001d50 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002982:	f7ff f9e5 	bl	8001d50 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e19b      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4927      	ldr	r1, [pc, #156]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <HAL_RCC_OscConfig+0x270>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff f9c8 	bl	8001d50 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c4:	f7ff f9c4 	bl	8001d50 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e17a      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d03a      	beq.n	8002a64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d019      	beq.n	8002a2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_RCC_OscConfig+0x274>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7ff f9a8 	bl	8001d50 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7ff f9a4 	bl	8001d50 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e15a      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f000 fada 	bl	8002fdc <RCC_Delay>
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7ff f98e 	bl	8001d50 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a36:	e00f      	b.n	8002a58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a38:	f7ff f98a 	bl	8001d50 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d908      	bls.n	8002a58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e140      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	42420000 	.word	0x42420000
 8002a54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e9      	bne.n	8002a38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a6 	beq.w	8002bbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b97      	ldr	r3, [pc, #604]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10d      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b94      	ldr	r3, [pc, #592]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a93      	ldr	r2, [pc, #588]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	61d3      	str	r3, [r2, #28]
 8002a8e:	4b91      	ldr	r3, [pc, #580]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b8e      	ldr	r3, [pc, #568]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a8a      	ldr	r2, [pc, #552]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7ff f94b 	bl	8001d50 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7ff f947 	bl	8001d50 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	; 0x64
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0fd      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x312>
 8002ae4:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4a7a      	ldr	r2, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6213      	str	r3, [r2, #32]
 8002af0:	e02d      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x334>
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a72      	ldr	r2, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	e01c      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x356>
 8002b1c:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a6c      	ldr	r2, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a69      	ldr	r2, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	e00b      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a66      	ldr	r2, [pc, #408]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6213      	str	r3, [r2, #32]
 8002b42:	4b64      	ldr	r3, [pc, #400]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a63      	ldr	r2, [pc, #396]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d015      	beq.n	8002b82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7ff f8fb 	bl	8001d50 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7ff f8f7 	bl	8001d50 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0ab      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ee      	beq.n	8002b5e <HAL_RCC_OscConfig+0x37e>
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7ff f8e5 	bl	8001d50 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7ff f8e1 	bl	8001d50 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e095      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ee      	bne.n	8002b8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d105      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb2:	4b48      	ldr	r3, [pc, #288]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8081 	beq.w	8002cca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc8:	4b42      	ldr	r3, [pc, #264]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d061      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d146      	bne.n	8002c6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7ff f8b5 	bl	8001d50 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7ff f8b1 	bl	8001d50 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e067      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	492d      	ldr	r1, [pc, #180]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a19      	ldr	r1, [r3, #32]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	430b      	orrs	r3, r1
 8002c36:	4927      	ldr	r1, [pc, #156]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7ff f885 	bl	8001d50 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7ff f881 	bl	8001d50 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e037      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x46a>
 8002c68:	e02f      	b.n	8002cca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7ff f86e 	bl	8001d50 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7ff f86a 	bl	8001d50 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e020      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x498>
 8002c96:	e018      	b.n	8002cca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	42420060 	.word	0x42420060

08002ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0d0      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d910      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 0207 	bic.w	r2, r3, #7
 8002d0a:	4965      	ldr	r1, [pc, #404]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b8      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d3c:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	494d      	ldr	r1, [pc, #308]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d040      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d115      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e073      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4936      	ldr	r1, [pc, #216]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd0:	f7fe ffbe 	bl	8001d50 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe ffba 	bl	8001d50 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e053      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 020c 	and.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d210      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 0207 	bic.w	r2, r3, #7
 8002e16:	4922      	ldr	r1, [pc, #136]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e032      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4916      	ldr	r1, [pc, #88]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6e:	f000 f821 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4601      	mov	r1, r0
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	fa21 f303 	lsr.w	r3, r1, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1cc>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe ff1c 	bl	8001ccc <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	080041b4 	.word	0x080041b4
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b490      	push	{r4, r7}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eba:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ebc:	1d3c      	adds	r4, r7, #4
 8002ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ec4:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x46>
 8002ef2:	e02d      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ef6:	623b      	str	r3, [r7, #32]
      break;
 8002ef8:	e02d      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f06:	4413      	add	r3, r2
 8002f08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	0c5b      	lsrs	r3, r3, #17
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f26:	4413      	add	r3, r2
 8002f28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f32:	fb02 f203 	mul.w	r2, r2, r3
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	e004      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	623b      	str	r3, [r7, #32]
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f52:	623b      	str	r3, [r7, #32]
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	6a3b      	ldr	r3, [r7, #32]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3728      	adds	r7, #40	; 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc90      	pop	{r4, r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	080041a0 	.word	0x080041a0
 8002f68:	080041b0 	.word	0x080041b0
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	003d0900 	.word	0x003d0900

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff2 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f94:	4601      	mov	r1, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	080041c4 	.word	0x080041c4

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fb8:	f7ff ffde 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4601      	mov	r1, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0adb      	lsrs	r3, r3, #11
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	080041c4 	.word	0x080041c4

08002fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <RCC_Delay+0x34>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <RCC_Delay+0x38>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0a5b      	lsrs	r3, r3, #9
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ff8:	bf00      	nop
  }
  while (Delay --);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	60fa      	str	r2, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f9      	bne.n	8002ff8 <RCC_Delay+0x1c>
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000
 8003014:	10624dd3 	.word	0x10624dd3

08003018 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe fd10 	bl	8001a64 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 fa92 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_TIM_OC_Start_IT+0x24>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e022      	b.n	8003122 <HAL_TIM_OC_Start_IT+0x6a>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d109      	bne.n	80030f6 <HAL_TIM_OC_Start_IT+0x3e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	e015      	b.n	8003122 <HAL_TIM_OC_Start_IT+0x6a>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d109      	bne.n	8003110 <HAL_TIM_OC_Start_IT+0x58>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e008      	b.n	8003122 <HAL_TIM_OC_Start_IT+0x6a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0a4      	b.n	8003274 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_TIM_OC_Start_IT+0x82>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003138:	e013      	b.n	8003162 <HAL_TIM_OC_Start_IT+0xaa>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d104      	bne.n	800314a <HAL_TIM_OC_Start_IT+0x92>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003148:	e00b      	b.n	8003162 <HAL_TIM_OC_Start_IT+0xaa>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d104      	bne.n	800315a <HAL_TIM_OC_Start_IT+0xa2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003158:	e003      	b.n	8003162 <HAL_TIM_OC_Start_IT+0xaa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d841      	bhi.n	80031ec <HAL_TIM_OC_Start_IT+0x134>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_TIM_OC_Start_IT+0xb8>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080031ed 	.word	0x080031ed
 8003178:	080031ed 	.word	0x080031ed
 800317c:	080031ed 	.word	0x080031ed
 8003180:	080031b7 	.word	0x080031b7
 8003184:	080031ed 	.word	0x080031ed
 8003188:	080031ed 	.word	0x080031ed
 800318c:	080031ed 	.word	0x080031ed
 8003190:	080031c9 	.word	0x080031c9
 8003194:	080031ed 	.word	0x080031ed
 8003198:	080031ed 	.word	0x080031ed
 800319c:	080031ed 	.word	0x080031ed
 80031a0:	080031db 	.word	0x080031db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0202 	orr.w	r2, r2, #2
 80031b2:	60da      	str	r2, [r3, #12]
      break;
 80031b4:	e01b      	b.n	80031ee <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0204 	orr.w	r2, r2, #4
 80031c4:	60da      	str	r2, [r3, #12]
      break;
 80031c6:	e012      	b.n	80031ee <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0208 	orr.w	r2, r2, #8
 80031d6:	60da      	str	r2, [r3, #12]
      break;
 80031d8:	e009      	b.n	80031ee <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0210 	orr.w	r2, r2, #16
 80031e8:	60da      	str	r2, [r3, #12]
      break;
 80031ea:	e000      	b.n	80031ee <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80031ec:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fbac 	bl	8003954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_TIM_OC_Start_IT+0x1c4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d107      	bne.n	8003216 <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a18      	ldr	r2, [pc, #96]	; (800327c <HAL_TIM_OC_Start_IT+0x1c4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_TIM_OC_Start_IT+0x186>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d009      	beq.n	800323e <HAL_TIM_OC_Start_IT+0x186>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_TIM_OC_Start_IT+0x1c8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_TIM_OC_Start_IT+0x186>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_TIM_OC_Start_IT+0x1cc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d111      	bne.n	8003262 <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b06      	cmp	r3, #6
 800324e:	d010      	beq.n	8003272 <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	e007      	b.n	8003272 <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800

08003288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b02      	cmp	r3, #2
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0202 	mvn.w	r2, #2
 80032b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f93c 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe f834 	bl	8001340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f93e 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0204 	mvn.w	r2, #4
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f912 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe f80a 	bl	8001340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f914 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b08      	cmp	r3, #8
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b08      	cmp	r3, #8
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0208 	mvn.w	r2, #8
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8e8 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd ffe0 	bl	8001340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8ea 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b10      	cmp	r3, #16
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0210 	mvn.w	r2, #16
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2208      	movs	r2, #8
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8be 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd ffb6 	bl	8001340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f8c0 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10e      	bne.n	800340c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0201 	mvn.w	r2, #1
 8003404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd ffa3 	bl	8001352 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d10e      	bne.n	8003438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b80      	cmp	r3, #128	; 0x80
 8003426:	d107      	bne.n	8003438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fb19 	bl	8003a6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d10e      	bne.n	8003464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d107      	bne.n	8003464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f884 	bl	800356c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0220 	mvn.w	r2, #32
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fae4 	bl	8003a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e046      	b.n	8003540 <HAL_TIM_OC_ConfigChannel+0xa8>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	d839      	bhi.n	8003534 <HAL_TIM_OC_ConfigChannel+0x9c>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	08003535 	.word	0x08003535
 80034d0:	08003535 	.word	0x08003535
 80034d4:	08003535 	.word	0x08003535
 80034d8:	0800350b 	.word	0x0800350b
 80034dc:	08003535 	.word	0x08003535
 80034e0:	08003535 	.word	0x08003535
 80034e4:	08003535 	.word	0x08003535
 80034e8:	08003519 	.word	0x08003519
 80034ec:	08003535 	.word	0x08003535
 80034f0:	08003535 	.word	0x08003535
 80034f4:	08003535 	.word	0x08003535
 80034f8:	08003527 	.word	0x08003527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f89e 	bl	8003644 <TIM_OC1_SetConfig>
      break;
 8003508:	e015      	b.n	8003536 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f8fd 	bl	8003710 <TIM_OC2_SetConfig>
      break;
 8003516:	e00e      	b.n	8003536 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f960 	bl	80037e4 <TIM_OC3_SetConfig>
      break;
 8003524:	e007      	b.n	8003536 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f9c3 	bl	80038b8 <TIM_OC4_SetConfig>
      break;
 8003532:	e000      	b.n	8003536 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003534:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
	...

08003580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a26      	ldr	r2, [pc, #152]	; (800363c <TIM_Base_SetConfig+0xbc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a25      	ldr	r2, [pc, #148]	; (8003640 <TIM_Base_SetConfig+0xc0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <TIM_Base_SetConfig+0xbc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a18      	ldr	r2, [pc, #96]	; (8003640 <TIM_Base_SetConfig+0xc0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a07      	ldr	r2, [pc, #28]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d103      	bne.n	8003628 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	615a      	str	r2, [r3, #20]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800

08003644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0302 	bic.w	r3, r3, #2
 800368c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <TIM_OC1_SetConfig+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10c      	bne.n	80036ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0308 	bic.w	r3, r3, #8
 80036a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a13      	ldr	r2, [pc, #76]	; (800370c <TIM_OC1_SetConfig+0xc8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d111      	bne.n	80036e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	621a      	str	r2, [r3, #32]
}
 8003700:	bf00      	nop
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40012c00 	.word	0x40012c00

08003710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0210 	bic.w	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0320 	bic.w	r3, r3, #32
 800375a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <TIM_OC2_SetConfig+0xd0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10d      	bne.n	800378c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC2_SetConfig+0xd0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d113      	bne.n	80037bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800379a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	40012c00 	.word	0x40012c00

080037e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0303 	bic.w	r3, r3, #3
 800381a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800382c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <TIM_OC3_SetConfig+0xd0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10d      	bne.n	800385e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800385c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <TIM_OC3_SetConfig+0xd0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d113      	bne.n	800388e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800386c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	621a      	str	r2, [r3, #32]
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40012c00 	.word	0x40012c00

080038b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	031b      	lsls	r3, r3, #12
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <TIM_OC4_SetConfig+0x98>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d109      	bne.n	800392c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800391e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	40012c00 	.word	0x40012c00

08003954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e046      	b.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d009      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10c      	bne.n	8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800

08003a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e03f      	b.n	8003b0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe f836 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 faa7 	bl	8004014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	4613      	mov	r3, r2
 8003b22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d140      	bne.n	8003bb2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_UART_Receive_IT+0x26>
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e039      	b.n	8003bb4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Receive_IT+0x38>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e032      	b.n	8003bb4 <HAL_UART_Receive_IT+0x9e>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2222      	movs	r2, #34	; 0x22
 8003b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0220 	orr.w	r2, r2, #32
 8003bac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
  }
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_UART_IRQHandler+0x52>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f982 	bl	8003f14 <UART_Receive_IT>
      return;
 8003c10:	e0d1      	b.n	8003db6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80b0 	beq.w	8003d7a <HAL_UART_IRQHandler+0x1ba>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_UART_IRQHandler+0x70>
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80a5 	beq.w	8003d7a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_UART_IRQHandler+0x90>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_UART_IRQHandler+0xb0>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	f043 0202 	orr.w	r2, r3, #2
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_UART_IRQHandler+0xd0>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00f      	beq.n	8003cba <HAL_UART_IRQHandler+0xfa>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <HAL_UART_IRQHandler+0xee>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	f043 0208 	orr.w	r2, r3, #8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d078      	beq.n	8003db4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_UART_IRQHandler+0x11c>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f91c 	bl	8003f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <HAL_UART_IRQHandler+0x144>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d031      	beq.n	8003d68 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f86d 	bl	8003de4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d023      	beq.n	8003d60 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d26:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d013      	beq.n	8003d58 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <HAL_UART_IRQHandler+0x1fc>)
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe f91f 	bl	8001f80 <HAL_DMA_Abort_IT>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d016      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d52:	4610      	mov	r0, r2
 8003d54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d56:	e00e      	b.n	8003d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f83a 	bl	8003dd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5e:	e00a      	b.n	8003d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f836 	bl	8003dd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d66:	e006      	b.n	8003d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f832 	bl	8003dd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d74:	e01e      	b.n	8003db4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d76:	bf00      	nop
    return;
 8003d78:	e01c      	b.n	8003db4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_UART_IRQHandler+0x1d6>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f859 	bl	8003e46 <UART_Transmit_IT>
    return;
 8003d94:	e00f      	b.n	8003db6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_UART_IRQHandler+0x1f6>
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f89a 	bl	8003ee4 <UART_EndTransmit_IT>
    return;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003db4:	bf00      	nop
  }
}
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	08003e1f 	.word	0x08003e1f

08003dc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dfa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff ffca 	bl	8003dd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b21      	cmp	r3, #33	; 0x21
 8003e58:	d13e      	bne.n	8003ed8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d114      	bne.n	8003e8e <UART_Transmit_IT+0x48>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d110      	bne.n	8003e8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	621a      	str	r2, [r3, #32]
 8003e8c:	e008      	b.n	8003ea0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6211      	str	r1, [r2, #32]
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4619      	mov	r1, r3
 8003eae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10f      	bne.n	8003ed4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff5b 	bl	8003dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b22      	cmp	r3, #34	; 0x22
 8003f26:	d170      	bne.n	800400a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d117      	bne.n	8003f62 <UART_Receive_IT+0x4e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d113      	bne.n	8003f62 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	1c9a      	adds	r2, r3, #2
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f60:	e026      	b.n	8003fb0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f74:	d007      	beq.n	8003f86 <UART_Receive_IT+0x72>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <UART_Receive_IT+0x80>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e008      	b.n	8003fa6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d120      	bne.n	8004006 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0220 	bic.w	r2, r2, #32
 8003fd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fd f931 	bl	8001264 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e002      	b.n	800400c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800404e:	f023 030c 	bic.w	r3, r3, #12
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	430b      	orrs	r3, r1
 800405a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2c      	ldr	r2, [pc, #176]	; (8004128 <UART_SetConfig+0x114>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d103      	bne.n	8004084 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7fe ff9a 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	e002      	b.n	800408a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004084:	f7fe ff82 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8004088:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009a      	lsls	r2, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	4a22      	ldr	r2, [pc, #136]	; (800412c <UART_SetConfig+0x118>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	0119      	lsls	r1, r3, #4
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009a      	lsls	r2, r3, #2
 80040b4:	441a      	add	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <UART_SetConfig+0x118>)
 80040c2:	fba3 0302 	umull	r0, r3, r3, r2
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	2064      	movs	r0, #100	; 0x64
 80040ca:	fb00 f303 	mul.w	r3, r0, r3
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	3332      	adds	r3, #50	; 0x32
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <UART_SetConfig+0x118>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e0:	4419      	add	r1, r3
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009a      	lsls	r2, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <UART_SetConfig+0x118>)
 80040fa:	fba3 0302 	umull	r0, r3, r3, r2
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	2064      	movs	r0, #100	; 0x64
 8004102:	fb00 f303 	mul.w	r3, r0, r3
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	3332      	adds	r3, #50	; 0x32
 800410c:	4a07      	ldr	r2, [pc, #28]	; (800412c <UART_SetConfig+0x118>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	f003 020f 	and.w	r2, r3, #15
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	440a      	add	r2, r1
 800411e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40013800 	.word	0x40013800
 800412c:	51eb851f 	.word	0x51eb851f

08004130 <__libc_init_array>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	2500      	movs	r5, #0
 8004134:	4e0c      	ldr	r6, [pc, #48]	; (8004168 <__libc_init_array+0x38>)
 8004136:	4c0d      	ldr	r4, [pc, #52]	; (800416c <__libc_init_array+0x3c>)
 8004138:	1ba4      	subs	r4, r4, r6
 800413a:	10a4      	asrs	r4, r4, #2
 800413c:	42a5      	cmp	r5, r4
 800413e:	d109      	bne.n	8004154 <__libc_init_array+0x24>
 8004140:	f000 f822 	bl	8004188 <_init>
 8004144:	2500      	movs	r5, #0
 8004146:	4e0a      	ldr	r6, [pc, #40]	; (8004170 <__libc_init_array+0x40>)
 8004148:	4c0a      	ldr	r4, [pc, #40]	; (8004174 <__libc_init_array+0x44>)
 800414a:	1ba4      	subs	r4, r4, r6
 800414c:	10a4      	asrs	r4, r4, #2
 800414e:	42a5      	cmp	r5, r4
 8004150:	d105      	bne.n	800415e <__libc_init_array+0x2e>
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004158:	4798      	blx	r3
 800415a:	3501      	adds	r5, #1
 800415c:	e7ee      	b.n	800413c <__libc_init_array+0xc>
 800415e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004162:	4798      	blx	r3
 8004164:	3501      	adds	r5, #1
 8004166:	e7f2      	b.n	800414e <__libc_init_array+0x1e>
 8004168:	080041cc 	.word	0x080041cc
 800416c:	080041cc 	.word	0x080041cc
 8004170:	080041cc 	.word	0x080041cc
 8004174:	080041d0 	.word	0x080041d0

08004178 <memset>:
 8004178:	4603      	mov	r3, r0
 800417a:	4402      	add	r2, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	f803 1b01 	strb.w	r1, [r3], #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <_init>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr

08004194 <_fini>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr
